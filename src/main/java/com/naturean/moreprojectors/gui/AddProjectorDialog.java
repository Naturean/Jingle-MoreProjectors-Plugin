package com.naturean.moreprojectors.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.naturean.moreprojectors.MoreProjectors;
import com.naturean.moreprojectors.projector.Projector;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;
import java.awt.*;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Objects;

public class AddProjectorDialog extends JDialog {
    private JButton addButton;
    private JButton cancelButton;
    private JPanel buttonPanel;
    private JPanel addPanel;
    private JLabel enterNameLabel;
    private JTextField nameTextField;

    boolean cancelled;

    String name;

    public AddProjectorDialog(JFrame owner) {
        super(owner);

        this.$$$setupUI$$$();
        this.setContentPane(this.addPanel);

        // To avoid operation on owner when dialog showing
        this.setModal(true);
        this.setModalityType(ModalityType.APPLICATION_MODAL);

        // Default button when dialog shows
        this.getRootPane().setDefaultButton(this.addButton);

        this.setTitle("Add New Projector");

        addButton.addActionListener(e -> AddProjectorDialog.this.onAdd());
        cancelButton.addActionListener(e -> AddProjectorDialog.this.onCancel());

        // Click cross icon for cancel.
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                AddProjectorDialog.this.onCancel();
            }
        });

        // Press ESCAPE to call for onCancel()
        this.addPanel.registerKeyboardAction(
                e -> AddProjectorDialog.this.onCancel(),
                KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0),
                JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT
        );

        this.pack();

        // Set location at the center of owner
        this.setLocationRelativeTo(owner);
    }

    private void onAdd() {
        this.name = this.nameTextField.getText().trim();

        if (StringUtils.isBlank(this.name)) {
            JOptionPane.showMessageDialog(null, "Projector name is blank!");
            this.nameTextField.setText("");
            return;
        }

        for (Projector projector : MoreProjectors.options.getProjectors()) {
            if (Objects.equals(projector.name, this.name)) {
                JOptionPane.showMessageDialog(null, "Projector \"" + this.name + "\" already exists!");
                this.nameTextField.setText("");
                return;
            }
        }

        this.dispose();
    }

    private void onCancel() {
        this.cancelled = true;
        this.dispose();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        addPanel = new JPanel();
        addPanel.setLayout(new GridLayoutManager(3, 1, new Insets(5, 10, 10, 10), -1, -1));
        enterNameLabel = new JLabel();
        enterNameLabel.setText("Enter projector name");
        addPanel.add(enterNameLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        nameTextField = new JTextField();
        addPanel.add(nameTextField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        addPanel.add(buttonPanel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        buttonPanel.add(addButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        buttonPanel.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return addPanel;
    }

}
