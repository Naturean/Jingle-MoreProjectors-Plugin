package com.naturean.moreprojectors.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import com.naturean.moreprojectors.hotkey.ProjectorSettingHotkey;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.LinkedHashSet;

public class ManageHotkeysDialog extends JDialog {
    private JPanel manageHotkeysPanel;
    private JPanel buttonPanel;
    private JButton OKButton;
    private JButton cancelButton;
    private JPanel hotkeysPanel;
    private HotkeyListPanel hotkeyListPanel;

    public boolean cancelled;
    public LinkedHashSet<ProjectorSettingHotkey> hotkeys;

    public ManageHotkeysDialog(JDialog owner, LinkedHashSet<ProjectorSettingHotkey> hotkeys) {
        super(owner);

        this.hotkeys = hotkeys;

        this.$$$setupUI$$$();
        this.setContentPane(this.manageHotkeysPanel);

        // To avoid operation on owner when dialog showing
        this.setModal(true);
        this.setModalityType(ModalityType.APPLICATION_MODAL);

        // Default button when dialog shows
        this.getRootPane().setDefaultButton(this.OKButton);

        this.setTitle("Manage Hotkeys");

        OKButton.addActionListener(e -> ManageHotkeysDialog.this.onOK());
        cancelButton.addActionListener(e -> ManageHotkeysDialog.this.onCancel());

        // Click cross icon for cancel.
        this.setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                ManageHotkeysDialog.this.onCancel();
            }
        });

        this.pack();

        // Set location at the center of owner
        this.setLocationRelativeTo(owner);
    }

    private void createUIComponents() {
        this.hotkeyListPanel = new HotkeyListPanel(this, this.hotkeys);
    }

    private void onOK() {
        this.hotkeys = this.hotkeyListPanel.hotkeys;
        this.dispose();
    }

    private void onCancel() {
        this.cancelled = true;
        this.dispose();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        manageHotkeysPanel = new JPanel();
        manageHotkeysPanel.setLayout(new GridLayoutManager(2, 1, new Insets(5, 10, 10, 10), -1, -1));
        hotkeysPanel = new JPanel();
        hotkeysPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 5, 0), -1, -1));
        manageHotkeysPanel.add(hotkeysPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        hotkeysPanel.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        scrollPane1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        scrollPane1.setViewportView(panel1);
        hotkeyListPanel.setEnabled(true);
        panel1.add(hotkeyListPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        buttonPanel = new JPanel();
        buttonPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        manageHotkeysPanel.add(buttonPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        OKButton = new JButton();
        OKButton.setText("OK");
        buttonPanel.add(OKButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cancelButton = new JButton();
        cancelButton.setText("Cancel");
        buttonPanel.add(cancelButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return manageHotkeysPanel;
    }

}
